name: Build QMK firmware + Hidrosis

on: [workflow_dispatch,push]

permissions:
  contents: write

jobs:
#   build_qmk:
#     name: 'QMK Userspace Build'
#     uses: qmk/.github/.github/workflows/qmk_userspace_build.yml@main
#     with:
#       qmk_repo: qmk/qmk_firmware
#       qmk_ref: master
  build_linux:
    name: 'Hidrosis Linux Build'
    runs-on: ubuntu-latest
    steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          with:
            submodules: true
        - name: Install Dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y cmake build-essential libusb-1.0-0-dev libudev-dev libxkbcommon-x11-dev libx11-dev libxkbcommon-dev libxkbfile-dev rpm libwayland-dev
        - name: Build Hidrosis for Linux
          run: |
            mkdir -p hidrosis/build
            cd hidrosis/build
            cmake ..
            cmake --build .
        - name: Create the .deb & .rpm packages
          id: build_linux
          run: |
            cd hidrosis
            export DEB_DIR=$(mktemp -d)
            export RPM_DIR=$(mktemp -d)
            export VERSION=${GITHUB_SHA::7}
            echo "DEB_DIR=$DEB_DIR" >> $GITHUB_ENV
            echo "DEB_DIR=$DEB_DIR" >> $GITHUB_OUTPUT
            echo "RPM_DIR=$RPM_DIR" >> $GITHUB_ENV
            echo "RPM_DIR=$RPM_DIR" >> $GITHUB_OUTPUT
            echo "VERSION=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
            echo "VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
            mkdir -p $DEB_DIR/DEBIAN
            cp packaging/linux/debian/* $DEB_DIR/DEBIAN
            mkdir -p $DEB_DIR/usr/bin
            cp build/app/hidrosis $DEB_DIR/usr/bin/
            chmod +x $DEB_DIR/usr/bin/hidrosis
            mkdir -p $DEB_DIR/usr/lib/systemd/user
            cp packaging/linux/systemd/hidrosis.service $DEB_DIR/usr/lib/systemd/user/
            chmod 755 $DEB_DIR/DEBIAN/postinstall
            chmod 755 $DEB_DIR/DEBIAN/postrm
            mkdir -p $DEB_DIR/usr/lib/udev/rules.d/
            cp packaging/linux/90-hidrosis.rules $DEB_DIR/usr/lib/udev/rules.d/
            dpkg-deb --build $DEB_DIR $DEB_DIR/hidrosis-linux-aarch64.deb

            mkdir -p $RPM_DIR/{SOURCES,SPECS}
            cp ./build/app/hidrosis $RPM_DIR/SOURCES/
            cp ./packaging/linux/fedora/SPEC $RPM_DIR/SPECS/hidrosis.spec
            cp ./packaging/linux/systemd/hidrosis.service $RPM_DIR/SOURCES
            cp ./packaging/linux/90-hidrosis.rules $RPM_DIR/SOURCES
            cp ./README.md $RPM_DIR/SOURCES
            cp ../LICENSE $RPM_DIR/SOURCES
            rm -rf ~/rpmbuild
            cp -r $RPM_DIR ~/rpmbuild
            rpmbuild -ba ~/rpmbuild/SPECS/hidrosis.spec
            find ~/rpmbuild
            cp ~/rpmbuild/RPMS/x86_64/*.rpm $RPM_DIR/fedora.rpm

        - name: Upload .deb
          uses: actions/upload-artifact@v4
          with:
            name: debian.deb
            path: ${{steps.build_linux.outputs.DEB_DIR}}/hidrosis-linux-aarch64.deb

        - name: Upload .rpm
          uses: actions/upload-artifact@v4
          with:
            name: fedora.rpm
            path: ${{steps.build_linux.outputs.RPM_DIR}}/fedora.rpm

  build_windows:
    name: 'Hidrosis Windows Build'
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install Dependencies
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install visualstudio2022community --package-parameters "--add Microsoft.VisualStudio.Workload.ManagedDesktop"
          choco install nsis
      - name: Build Hidrosis for Windows
        run: |
          mkdir -p hidrosis/build
          cd hidrosis/build
          cmake -G "Visual Studio 17 2022" -DCMAKE_POLICY_VERSION_MINIMUM="3.5" ..
          cmake --build . --config Release
      - name: Create the installer using nsis and .nsi script at packaging/windows
        run: |
          cd hidrosis
          ls
          ls packaging/windows
          C:\"Program Files (x86)"\NSIS\makensis.exe packaging\windows\installer.nsi

  release:
    needs: [build_linux,build_windows]   # Wait for build jobs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Debian build
        uses: actions/download-artifact@v4
        with:
          name: debian.deb
          path: dist/

      - name: Download Fedora build
        uses: actions/download-artifact@v4
        with:
          name: fedora.rpm
          path: dist/

      - name: Download Windows build
        uses: actions/download-artifact@v4
        with:
          name: windows.exe
          path: dist/

      - name: Get timestamp
        id: ts
        run: echo "timestamp=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
      # Create the release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.ts.outputs.timestamp }}
          release_name: Release ${{ steps.ts.outputs.timestamp }}
          body: "Automated release from GitHub Actions"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload artifacts to the release
      - name: Upload Debian executable
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/hidrosis-linux-aarch64.deb
          asset_name: hidrosis-linux-aarch64.deb
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Fedora executable
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/fedora.rpm
          asset_name: hidrosis-linux-aarch64.rpm
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   publish:
#     name: 'QMK Userspace Publish'
#     uses: qmk/.github/.github/workflows/qmk_userspace_publish.yml@main
#     if: always() && !cancelled()
#     needs: build_qmk
